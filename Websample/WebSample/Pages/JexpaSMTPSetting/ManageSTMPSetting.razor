@page "/manage-smtp-settings"
<PageTitle Title="CSMTPSetting - Manage SMTP Settings" />

@using Jexpa.Core
@using Jexpa.Core.Legacy
@using Jexpa.Model.Entity
@using WebSample.Data
@using WebSample.Components

<h1>CSMTPSetting</h1>

<p>This component demonstrates managing CSMTPSetting.</p>

@if (settingList.Count <= 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="float-right pr-2 pb-2">
        <button class="bg-blue-500 hover:bg-blue-700 text-xs text-white font-bold py-1 px-2 border border-blue-500 rounded"
            @onclick="() => StartAddRow()">
            <span class="text-white"><i class="fas fa-plus"></i></span>
        </button>
    </div>

    <TableTemplate Columns="columnNames" Items="settingList" Context="setting" TItem="CSMTPSetting">
        <RowTemplate>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[0]</span>@setting.GetID()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[1]</span>@setting.GetProviderName()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[2]</span>@setting.GetSMTPHost()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[3]</span>@setting.GetSMTPPort()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[4]</span>@setting.GetSMTPUsername()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[5]</span>@setting.GetSMTPPassword()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[6]</span>@setting.GetDescription()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[7]</span>@setting.GetUseTLS()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[8]</span>@setting.GetIsDefault()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[9]</span>@setting.GetModifiedDate()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[10]</span>@setting.GetCreatedBy()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[11]</span>@setting.GetCreatedDate()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[12]</span>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 border border-blue-500 rounded"
                    @onclick="() => StartEditRow(setting)">
                    <span class="oi oi-pencil"></span>
                </button>
                <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 border border-red-500 rounded"
                    @onclick="() => DeleteSMTPSetting(setting)">
                    <span class="oi oi-delete"></span>
                </button>
            </td>
        </RowTemplate>
    </TableTemplate>

    <ModalTemplate ModalTitle="Add SMTPSetting" IsModalVisible="IsAddMode" OnCloseCallBack="ResetModalMode" Item="@settingModel" Context="addSMTPSettingModel">
        <BodyTemplate>
            <EditForm id="add-setting-form" Model="@addSMTPSettingModel" class="w-[90%]" OnValidSubmit="@HandleValidAddSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="flex flex-row pb-2">
                    <label for="new@(columnNames[0])" class="text-md text-gray-600 pr-2">@columnNames[0]:</label>
                    <p>This field is auto-generated.</p>
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[1])" class="text-md text-gray-600">@columnNames[1]:</label>
                    <input type="text" id="new@(columnNames[1])" name="@columnNames[1]" class="" @bind-value="settingModel.ProviderName" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[2])" class="text-md text-gray-600">@columnNames[2]:</label>
                    <input type="text" id="new@(columnNames[2])" name="@columnNames[2]" class="" @bind-value="settingModel.SMTPHost" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[3])" class="text-md text-gray-600">@columnNames[3]:</label>
                    <input type="text" id="new@(columnNames[3])" name="@columnNames[3]" class="" @bind-value="settingModel.SMTPPort" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[4])" class="text-md text-gray-600">@columnNames[4]:</label>
                    <input type="text" id="new@(columnNames[4])" name="@columnNames[4]" class="" @bind-value="settingModel.SMTPUsername" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[5])" class="text-md text-gray-600">@columnNames[5]:</label>
                    <input type="password" id="new@(columnNames[5])" name="@columnNames[5]" class="" @bind-value="settingModel.SMTPPassword" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[6])" class="text-md text-gray-600">@columnNames[6]:</label>
                    <input type="text" id="new@(columnNames[6])" name="@columnNames[6]" class="" @bind-value="settingModel.Description" />
                </div>
                <div class="flex flex-row pb-2">
                    <label for="new@(columnNames[7])" class="text-md text-gray-600 pr-2">@columnNames[7]:</label>
                    <JexpaCheckBox IsChecked="settingModel.UseTLS" OnChangeCallBack="(value) => {settingModel.UseTLS = value;}"></JexpaCheckBox>
                </div>
                <div class="flex flex-row pb-2">
                    <label for="new@(columnNames[8])" class="text-md text-gray-600 pr-2">@columnNames[8]:</label>
                    <JexpaCheckBox IsChecked="settingModel.IsDefault" OnChangeCallBack="(value) => {settingModel.IsDefault = value;}"></JexpaCheckBox>
                </div>
                <div class="flex flex-row pb-2">
                    <label for="new@(columnNames[9])" class="text-md text-gray-600 pr-2">@columnNames[9]:</label>
                    <p>This field is auto-generated.</p>
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[10])" class="text-md text-gray-600">@columnNames[10]:</label>
                    <input type="number" id="new@(columnNames[10])" name="@columnNames[10]" class="" @bind-value="settingModel.CreatedBy" />
                </div>
                <div class="flex flex-row pb-2">
                    <label for="new@(columnNames[11])" class="text-md text-gray-600 pr-2">@columnNames[10]:</label>
                    <p>This field is auto-generated.</p>
                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="flex justify-end pt-2 space-x-14">
                <button class="px-4 bg-gray-200 p-3 rounded text-black hover:bg-gray-300 font-semibold" @onclick="() => { IsAddMode = false; }">
                    Cancel
                </button>
                <button type="submit" form="add-setting-form"
                    class="px-4 bg-blue-500 p-3 ml-3 rounded-lg text-white hover:bg-teal-400">
                    Confirm
                </button>
            </div>
        </FooterTemplate>
    </ModalTemplate>

    <ModalTemplate ModalTitle="Edit SMTPSetting" IsModalVisible="IsEditMode" OnCloseCallBack="ResetModalMode" Item="@settingModel" Context="editSMTPSettingModel">
        <BodyTemplate>
            <EditForm id="edit-setting-form" Model="@editSMTPSettingModel" class="w-[90%]" OnValidSubmit="@HandleValidEditSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[0])" class="text-md text-gray-600 pr-2">@columnNames[0]:</label>
                    <p>@settingModel.ID</p>
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[1])" class="text-md text-gray-600">@columnNames[1]:</label>
                    <input type="text" id="edit@(columnNames[1])" name="edit@(columnNames[1])" class="" @bind-value="settingModel.ProviderName" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[2])" class="text-md text-gray-600">@columnNames[2]:</label>
                    <input type="text" id="edit@(columnNames[2])" name="edit@(columnNames[2])" class="" @bind-value="settingModel.SMTPHost" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[3])" class="text-md text-gray-600">@columnNames[3]:</label>
                    <input type="text" id="edit@(columnNames[3])" name="edit@(columnNames[3])" class="" @bind-value="settingModel.SMTPPort" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[4])" class="text-md text-gray-600">@columnNames[4]:</label>
                    <input type="text" id="edit@(columnNames[4])" name="edit@(columnNames[4])" class="" @bind-value="settingModel.SMTPUsername" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[5])" class="text-md text-gray-600">@columnNames[5]:</label>
                    <input type="password" id="edit@(columnNames[5])" name="edit@(columnNames[5])" class="" @bind-value="settingModel.SMTPPassword" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[6])" class="text-md text-gray-600">@columnNames[6]:</label>
                    <input type="text" id="edit@(columnNames[6])" name="edit@(columnNames[6])" class="" @bind-value="settingModel.Description" />
                </div>
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[7])" class="text-md text-gray-600 pr-2">@columnNames[7]:</label>
                    <JexpaCheckBox IsChecked="settingModel.UseTLS" OnChangeCallBack="(value) => {settingModel.UseTLS = value;}"></JexpaCheckBox>
                </div>
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[8])" class="text-md text-gray-600 pr-2">@columnNames[8]:</label>
                    <JexpaCheckBox IsChecked="settingModel.IsDefault" OnChangeCallBack="(value) => {settingModel.IsDefault = value;}"></JexpaCheckBox>
                </div>
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[9])" class="text-md text-gray-600 pr-2">@columnNames[9]:</label>
                    <p>This field is auto-updated.</p>
                </div>
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[10])" class="text-md text-gray-600 pr-2">@columnNames[10]:</label>
                    <p>@settingModel.CreatedBy</p>
                </div>
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[11])" class="text-md text-gray-600 pr-2">@columnNames[11]:</label>
                    <p>@settingModel.CreatedDate</p>
                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="flex justify-end pt-2 space-x-14">
                <button class="px-4 bg-gray-200 p-3 rounded text-black hover:bg-gray-300 font-semibold" @onclick="() => { IsEditMode = false; }">
                    Cancel
                </button>
                <button type="submit" form="edit-setting-form"
                    class="px-4 bg-blue-500 p-3 ml-3 rounded-lg text-white hover:bg-teal-400">
                    Confirm
                </button>
            </div>
        </FooterTemplate>
    </ModalTemplate>
}

@code {
    private List<CSMTPSetting> settingList = new();
    private List<string> columnNames = new()
        {
            "ID", // 0
            "Provider_Name", // 1
            "SMTP_Host", // 2
            "SMTP_Port", // 3
            "SMTP_Username", // 4
            "SMTP_Password", // 5
            "Description", // 6
            "Use_TLS", // 7
            "Is_Default", // 8
            "Modified_Date", // 9
            "Created_By", // 10
            "Created_Date", // 11
            "Actions" // 11
        };

    private ModalMode _modalMode { get; set; } = ModalMode.DEFAULT;
    private SMTPSettingEntity settingModel = new();
    private CSMTPSetting selectedItem = new();
    private bool IsEditMode
    {
        get
        {
            if (_modalMode == ModalMode.EDIT)
                return true;
            return false;
        }
        set
        {
            if (value == true)
                _modalMode = ModalMode.EDIT;
            else
                _modalMode = ModalMode.DEFAULT;
        }
    }

    private bool IsAddMode
    {
        get
        {
            if (_modalMode == ModalMode.ADD)
                return true;
            return false;
        }
        set
        {
            if (value == true)
                _modalMode = ModalMode.ADD;
            else
                _modalMode = ModalMode.DEFAULT;
        }
    }

    private void ResetModalMode()
    {
        _modalMode = ModalMode.DEFAULT;
    }

    private void StartEditRow(CSMTPSetting aSetting)
    {
        selectedItem = aSetting;
        if (_modalMode == ModalMode.DEFAULT)
        {
            settingModel = new()
                {
                    ID = aSetting.GetID(),
                    ProviderName = aSetting.GetProviderName(),
                    SMTPHost = aSetting.GetSMTPHost(),
                    SMTPPort = aSetting.GetSMTPPort(),
                    SMTPUsername = aSetting.GetSMTPUsername(),
                    SMTPPassword = aSetting.GetSMTPPassword(),
                    Description = aSetting.GetDescription(),
                    UseTLS = aSetting.GetUseTLS(),
                    IsDefault = aSetting.GetIsDefault(),
                    ModifiedDate = aSetting.GetModifiedDate(),
                    CreatedBy = aSetting.GetCreatedBy(),
                    CreatedDate = aSetting.GetCreatedDate()
                };
            IsEditMode = true;
        }
    }
    private void HandleValidEditSubmit()
    {
        CSMTPSetting.Update(new CSMTPSetting(settingModel));
        selectedItem.SyncData();
        ResetModalMode();
    }

    private void StartAddRow()
    {
        if (_modalMode == ModalMode.DEFAULT)
        {
            settingModel = new SMTPSettingEntity();
            IsAddMode = true;
        }
    }

    private void HandleValidAddSubmit()
    {
        CSMTPSetting aSetting = CSMTPSetting.Add(new CSMTPSetting(settingModel));
        if (aSetting != null)
        {
            settingList.Add(aSetting);
        }
        ResetModalMode();
    }

    private void DeleteSMTPSetting(CSMTPSetting aSetting)
    {
        settingList.Remove(aSetting);
        CSMTPSetting.Delete(aSetting.GetID());
    }

    private Task<List<CSMTPSetting>> GetsettingListAsync()
    {
        return Task.FromResult(CSMTPSetting.List());
    }

    protected override async Task OnInitializedAsync()
    {
        settingList = await GetsettingListAsync();
        settingList.Sort((x, y) =>
        {
            var xId = x.GetID();
            var yId = y.GetID();
            if (xId == yId) return 0;
            if (xId > yId) return 1;
            return -1;
        });
    }
}
