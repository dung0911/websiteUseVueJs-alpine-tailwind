@page "/manage-price"
<PageTitle Title="CPrice - Manage Price" />

@using System.Globalization
@using WebSample.Data
@using WebSample.Components
@using Jexpa.Core
@using Jexpa.Core.Legacy
@using Jexpa.Model.Entity
@using BlazorDateRangePicker

<h1>CPrice</h1>

<p>This component demonstrates managing CPrice.</p>

@if (!isRendered)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="float-right pr-2 pb-2">
        <button class="bg-blue-500 hover:bg-blue-700 text-xs text-white font-bold py-1 px-2 border border-blue-500 rounded"
            @onclick="() => StartAddRow()">
            <span class="text-white"><i class="fas fa-plus"></i></span>
        </button>
    </div>
    
    <TableTemplate Columns="columnNames" Items="priceList" Context="price" TItem="CPrice">
        <RowTemplate>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[0]</span>@price.GetID()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[1]</span>@price.GetPaymentMethodID()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[2]</span>@price.GetPackageID()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[3]</span>@price.GetSubscriptionTypeID()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[4]</span>@price.GetCode()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[5]</span>@price.GetName()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[6]</span>@price.GetPrices()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[7]</span>@price.GetCurrencyID()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[8]</span>@price.GetStatus()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[9]</span>@price.GetCheckoutLink()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[10]</span>@price.GetDescription()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[11]</span>@price.GetZOrder()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[12]</span>@price.GetModifiedBy()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[13]</span>@price.GetModifiedDate()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[14]</span>@price.GetCreatedBy()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[15]</span>@price.GetCreatedDate()
            </td>
            <td class="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                <span class="inline-block w-1/3 md:hidden font-bold">@columnNames[16]</span>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 border border-blue-500 rounded"
                    @onclick="() => StartEditRow(price)">
                    <span class="oi oi-pencil"></span>
                </button>
                <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 border border-red-500 rounded"
                    @onclick="() => DeletePrice(price)">
                    <span class="oi oi-delete"></span>
                </button>
            </td>
        </RowTemplate>
    </TableTemplate>

    <ModalTemplate ModalTitle="Add Price" IsModalVisible="IsAddMode" OnCloseCallBack="ResetModalMode" Item="@priceModel" Context="addPriceModel">
        <BodyTemplate>
            <EditForm id="add-price-form" Model="@addPriceModel" class="w-[90%]" OnValidSubmit="@HandleValidAddSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="flex flex-row pb-2">
                    <label for="new@(columnNames[0])" class="text-md text-gray-600 pr-2">@columnNames[0]:</label>
                    <p>This field is auto-generated.</p>
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[1])" class="text-md text-gray-600">@columnNames[1]:</label>
                    <input type="number" id="new@(columnNames[1])" name="@columnNames[1]" class="" @bind-value="@addPriceModel.PaymentMethodID" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[2])" class="text-md text-gray-600">@columnNames[2]:</label>
                    <input type="number" id="new@(columnNames[2])" name="@columnNames[2]" class="" @bind-value="@addPriceModel.PackageID" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[3])" class="text-md text-gray-600">@columnNames[3]:</label>
                    <input type="number" id="new@(columnNames[3])" name="@columnNames[3]" class="" @bind-value="@addPriceModel.SubscriptionTypeID" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[4])" class="text-md text-gray-600">@columnNames[4]:</label>
                    <input type="text" id="new@(columnNames[4])" name="@columnNames[4]" class="" @bind-value="@addPriceModel.Code" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[5])" class="text-md text-gray-600">@columnNames[5]:</label>
                    <input type="text" id="new@(columnNames[5])" name="@columnNames[5]" class="" @bind-value="@addPriceModel.Name" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[6])" class="text-md text-gray-600">@columnNames[6]:</label>
                    <input type="number" step=any id="new@(columnNames[6])" name="@columnNames[6]" class="" @bind-value="@addPriceModel.Prices" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[7])" class="text-md text-gray-600">@columnNames[7]:</label>
                    <input type="number" id="new@(columnNames[7])" name="@columnNames[7]" class="" @bind-value="@addPriceModel.CurrencyID" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[8])" class="text-md text-gray-600">@columnNames[8]:</label>
                    <input type="number" id="new@(columnNames[8])" name="@columnNames[8]" class="" @bind-value="@addPriceModel.Status" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[9])" class="text-md text-gray-600">@columnNames[9]:</label>
                    <input type="text" id="new@(columnNames[9])" name="@columnNames[9]" class="" @bind-value="@addPriceModel.CheckoutLink" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[10])" class="text-md text-gray-600">@columnNames[10]:</label>
                    <input type="text" id="new@(columnNames[10])" name="@columnNames[10]" class="" @bind-value="@addPriceModel.Description" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[11])" class="text-md text-gray-600">@columnNames[11]:</label>
                    <input type="number" id="new@(columnNames[11])" name="@columnNames[11]" class="" @bind-value="@addPriceModel.ZOrder" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[12])" class="text-md text-gray-600">@columnNames[12]:</label>
                    <input type="number" id="new@(columnNames[12])" name="@columnNames[12]" class="" @bind-value="@addPriceModel.ModifiedBy" />
                </div>
                <div class="flex flex-row pb-2">
                    <label for="new@(columnNames[13])" class="text-md text-gray-600 pr-2">@columnNames[13]:</label>
                    <p>This field is auto-generated.</p>
                </div>
                <div class="flex flex-col pb-2">
                    <label for="new@(columnNames[14])" class="text-md text-gray-600">@columnNames[14]:</label>
                    <input type="number" id="new@(columnNames[14])" name="@columnNames[14]" class="" @bind-value="@addPriceModel.CreatedBy" />
                </div>
                <div class="flex flex-row pb-2">
                    <label for="new@(columnNames[15])" class="text-md text-gray-600 pr-2">@columnNames[15]:</label>
                    <p>This field is auto-generated.</p>
                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="flex justify-end pt-2 space-x-14">
                <button class="px-4 bg-gray-200 p-3 rounded text-black hover:bg-gray-300 font-semibold" @onclick="() => { IsAddMode = false; }">
                    Cancel
                </button>
                <button type="submit" form="add-price-form"
                    class="px-4 bg-blue-500 p-3 ml-3 rounded-lg text-white hover:bg-teal-400">
                    Confirm
                </button>
            </div>
        </FooterTemplate>
    </ModalTemplate>

    <ModalTemplate ModalTitle="Edit Price" IsModalVisible="IsEditMode" OnCloseCallBack="ResetModalMode" Item="@priceModel" Context="editPriceModel">
        <BodyTemplate>
            <EditForm id="edit-price-form" Model="@editPriceModel" class="w-[90%]" OnValidSubmit="@HandleValidEditSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[0])" class="text-md text-gray-600 pr-2">@columnNames[0]:</label>
                    <p>@editPriceModel.ID</p>
                </div>
                
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[1])" class="text-md text-gray-600">@columnNames[1]:</label>
                    <input type="number" id="edit@(columnNames[1])" name="edit@(columnNames[1])" class="" @bind-value="@editPriceModel.PaymentMethodID" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[2])" class="text-md text-gray-600">@columnNames[2]:</label>
                    <input type="number" id="edit@(columnNames[2])" name="edit@(columnNames[2])" class="" @bind-value="@editPriceModel.PackageID" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[3])" class="text-md text-gray-600">@columnNames[3]:</label>
                    <input type="number" id="edit@(columnNames[3])" name="edit@(columnNames[3])" class="" @bind-value="@editPriceModel.SubscriptionTypeID" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[4])" class="text-md text-gray-600">@columnNames[4]:</label>
                    <input type="text" id="edit@(columnNames[4])" name="edit@(columnNames[4])" class="" @bind-value="@editPriceModel.Code" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[5])" class="text-md text-gray-600">@columnNames[5]:</label>
                    <input type="text" id="edit@(columnNames[5])" name="edit@(columnNames[5])" class="" @bind-value="@editPriceModel.Name" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[6])" class="text-md text-gray-600">@columnNames[6]:</label>
                    <input type="number" step=any id="edit@(columnNames[6])" name="edit@(columnNames[6])" class="" @bind-value="@editPriceModel.Prices" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[7])" class="text-md text-gray-600">@columnNames[7]:</label>
                    <input type="number" id="edit@(columnNames[7])" name="edit@(columnNames[7])" class="" @bind-value="@editPriceModel.CurrencyID" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[8])" class="text-md text-gray-600">@columnNames[8]:</label>
                    <input type="number" id="edit@(columnNames[8])" name="edit@(columnNames[8])" class="" @bind-value="@editPriceModel.Status" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[9])" class="text-md text-gray-600">@columnNames[9]:</label>
                    <input type="text" id="edit@(columnNames[9])" name="edit@(columnNames[9])" class="" @bind-value="@editPriceModel.CheckoutLink" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[10])" class="text-md text-gray-600">@columnNames[10]:</label>
                    <input type="text" id="edit@(columnNames[10])" name="edit@(columnNames[10])" class="" @bind-value="@editPriceModel.Description" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[11])" class="text-md text-gray-600">@columnNames[11]:</label>
                    <input type="number" id="edit@(columnNames[11])" name="edit@(columnNames[11])" class="" @bind-value="@editPriceModel.ZOrder" />
                </div>
                <div class="flex flex-col pb-2">
                    <label for="edit@(columnNames[12])" class="text-md text-gray-600">@columnNames[12]:</label>
                    <input type="number" id="edit@(columnNames[12])" name="edit@(columnNames[12])" class="" @bind-value="@editPriceModel.ModifiedBy" />
                </div>
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[13])" class="text-md text-gray-600 pr-2">@columnNames[13]:</label>
                    <p>@editPriceModel.ModifiedDate</p>
                </div>
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[14])" class="text-md text-gray-600 pr-2">@columnNames[14]:</label>
                    <p>@editPriceModel.CreatedBy</p>
                </div>
                <div class="flex flex-row pb-2">
                    <label for="edit@(columnNames[15])" class="text-md text-gray-600 pr-2">@columnNames[15]:</label>
                    <p>@editPriceModel.CreatedDate</p>
                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="flex justify-end pt-2 space-x-14">
                <button class="px-4 bg-gray-200 p-3 rounded text-black hover:bg-gray-300 font-semibold" @onclick="() => { IsEditMode = false; }">
                    Cancel
                </button>
                <button type="submit" form="edit-price-form"
                    class="px-4 bg-blue-500 p-3 ml-3 rounded-lg text-white hover:bg-teal-400">
                    Confirm
                </button>
            </div>
        </FooterTemplate>
    </ModalTemplate>
}

@code {
    private string dateFormat = string.Format("{0} {1}", CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern, CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern);
    private bool isRendered = false;
    private List<CPrice> priceList = new();
    private List<string> columnNames = new()
        {
            "ID", // 0
            "Payment_Method_ID", // 1
            "Package_ID", // 2
            "Subscription_Type_ID", // 3
            "Code", // 4
            "Name", // 5
            "Prices", // 6 
            "Currency_ID", // 7
            "Status", // 8
            "Checkout_Link", // 9
            "Description", // 10
            "ZOrder", // 11
            "Modified_By", // 12
            "Modified_Date", // 13
            "Created_By", // 14
            "Created_Date", // 15 
            "Actions" // 16
        };
    private ModalMode _modalMode { get; set; } = ModalMode.DEFAULT;
    private PriceModel priceModel = new();
    private CPrice selectedItem = new();
    private bool IsEditMode
    {
        get
        {
            if (_modalMode == ModalMode.EDIT)
                return true;
            return false;
        }
        set
        {
            if (value == true)
                _modalMode = ModalMode.EDIT;
            else
                _modalMode = ModalMode.DEFAULT;
        }
    }

    private bool IsAddMode
    {
        get
        {
            if (_modalMode == ModalMode.ADD)
                return true;
            return false;
        }
        set
        {
            if (value == true)
                _modalMode = ModalMode.ADD;
            else
                _modalMode = ModalMode.DEFAULT;
        }
    }

    private void ResetModalMode()
    {
        _modalMode = ModalMode.DEFAULT;
    }

    private void StartEditRow(CPrice aPrice)
    {
        selectedItem = aPrice;
        if (_modalMode == ModalMode.DEFAULT)
        {
            priceModel = new()
                {
                    ID = aPrice.GetID(),
                    PaymentMethodID = aPrice.GetPaymentMethodID(),
                    PackageID = aPrice.GetPackageID(),
                    SubscriptionTypeID = aPrice.GetSubscriptionTypeID(),
                    Code = aPrice.GetCode(),
                    Name = aPrice.GetName(),
                    Prices = aPrice.GetPrices(),
                    CurrencyID = aPrice.GetCurrencyID(),
                    Status = aPrice.GetStatus(),
                    CheckoutLink = aPrice.GetCheckoutLink(),
                    Description = aPrice.GetDescription(),
                    ZOrder = aPrice.GetZOrder(),
                    ModifiedBy = aPrice.GetModifiedBy(),
                    ModifiedDate = aPrice.GetModifiedDate(),
                    CreatedBy = aPrice.GetCreatedBy(),
                    CreatedDate = aPrice.GetCreatedDate()
                };
            IsEditMode = true;
        }
    }
    private void HandleValidEditSubmit()
    {
        PriceEntity priceEntity = new PriceEntity(priceModel);
        CPrice.Update(new CPrice(priceEntity));
        selectedItem.SyncData();
        ResetModalMode();
    }

    private void StartAddRow()
    {
        if (_modalMode == ModalMode.DEFAULT)
        {
            priceModel = new();
            IsAddMode = true;
        }
    }

    private void HandleValidAddSubmit()
    {
        PriceEntity priceEntity = new PriceEntity(priceModel);
        CPrice aPrice = CPrice.Add(new CPrice(priceEntity));
        if (aPrice != null)
        {
            priceList.Add(aPrice);
        }
        ResetModalMode();
    }

    private void DeletePrice(CPrice aPrice)
    {
        priceList.Remove(aPrice);
        CPrice.Delete(aPrice.GetID());
    }

    private Task<List<CPrice>> GetpriceListAsync()
    {
        return Task.FromResult(CPrice.List());
    }

    protected override async Task OnInitializedAsync()
    {
        isRendered = true;
        priceList = await GetpriceListAsync();
        priceList.Sort((x, y) =>
        {
            var xId = x.GetID();
            var yId = y.GetID();
            if (xId == yId) return 0;
            if (xId > yId) return 1;
            return -1;
        });
    }
}
