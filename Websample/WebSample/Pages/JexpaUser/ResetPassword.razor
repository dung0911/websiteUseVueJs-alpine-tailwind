@page "/reset-password"

<PageTitle Title="CUser - Reset Password" />

@using Jexpa.Core;
@using Jexpa.Core.Legacy;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@inject NavigationManager NavigationManager

@if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(email))
{
    <p class="text-red-500 font-semibold">Provided invalid url queries</p>
}
else
{
    @if (tokenStatus == TokenStatus.Valid)
    {
        <p class="text-blue-500 font-semibold">@email</p>
        <p class="text-blue-500 font-semibold">@token</p>

        <section class="min-h-screen flex flex-col">
            <div class="flex flex-1 items-center justify-center">
                <div class="rounded-lg sm:border-2 px-4 lg:px-24 py-16 lg:max-w-xl sm:max-w-md w-full text-center">
                    <div class="text-center">
                        <h1 class="font-bold tracking-wider text-xl mb-2 w-full text-gray-600">
                            New Password
                        </h1>
                        <div class="py-2 text-left text-red-500 font-semibold">
                            @errorMarkup
                        </div>
                        <div class="py-2 text-left">
                            <input name="password" type="password" placeholder="Create new password" @bind-value="password"
                           class="border-2 border-gray-100 focus:outline-none bg-gray-100 block w-full py-2 px-4 rounded-lg focus:border-gray-700" />
                        </div>
                        <div class="py-2 text-left">
                            <input name="confirmPassword" type="password" placeholder="Confirm your password"
                           class="border-2 border-gray-100 focus:outline-none bg-gray-100 block w-full py-2 px-4 rounded-lg focus:border-gray-700" />
                        </div>
                        <div class="py-2 text-left">
                            <button @onclick="ChangePassword"
                            class="border-2 border-gray-100 focus:outline-none bg-purple-600 text-white font-bold tracking-wider block w-full p-2 rounded-lg focus:border-gray-700 hover:bg-purple-700">
                                Change
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }
    else
    {
        <div class="py-2 text-left text-red-500 font-semibold">
            <p>Token error - @tokenStatus.ToString()</p>
        </div>
    }
}

@code {
    private string token = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string brandUrl = string.Empty;
    private TokenStatus tokenStatus;
    private MarkupString errorMarkup = (MarkupString)string.Empty;
    private TokenService tokenService = new TokenService();

    protected override void OnInitialized()
    {
        StringValues values;
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out values))
        {
            email = values.FirstOrDefault();
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out values))
        {
            token = values.FirstOrDefault();
        }
        tokenStatus = tokenService.ValidateResetPasswordToken(CUser.GetByEmail(brandUrl, email).GetEntity(), token);
    }

    private void ChangePassword()
    {
        string passwordErrorMessage = string.Empty;
        if (string.IsNullOrEmpty(password))
        {
            passwordErrorMessage = "<p>Password is required</p>";
        }

        if (password.Length < 6)
        {
            if (string.IsNullOrEmpty(passwordErrorMessage))
            {
                passwordErrorMessage = "<br/>";
            }
            passwordErrorMessage += "<p>Password must be at least 6 characters</p>";
        }

        if (password != confirmPassword)
        {
            if (string.IsNullOrEmpty(passwordErrorMessage))
            {
                passwordErrorMessage = "<br/>";
            }
            passwordErrorMessage += "<p>Passwords do not match</p>";
        }

        if (string.IsNullOrEmpty(passwordErrorMessage))
        {
            errorMarkup = (MarkupString)passwordErrorMessage;
            return;
        }

        var result = CUser.ResetPassword(brandUrl, email, token, password);

        if (result == ResetPasswordStatus.Success)
        {
            NavigationManager.NavigateTo("login");
        }
        else
        {
            errorMarkup = (MarkupString)$"<p>Got an error in calling ResetPassword: {result.ToString()}</p>";
        }
    }
}